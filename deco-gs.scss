//
// Deco Grid System for SASS3 by Asko Soukka <asko.soukka@iki.fi>
// For originals by Alexander Limi, see http://deco.gs/
//
// Deco Grid System is Public Domain.
//

//
// Minimal example of use:
//
// @import "deco-gs";
// @include deco-gs(16);
//

//
// Initialization of undefined global variables with defaults values.
//
$deco-grid-width: 960px !default;
$deco-column-count: 16 !default;
$deco-margin-width: 10px !default;
$deco-uttermost-margins: true !default;
$deco-cell-width: ($deco-grid-width - $deco-margin-width
                   * ($deco-column-count - 1)) / $deco-column-count;
@if $deco-uttermost-margins {
  $deco-cell-width: ($deco-grid-width - $deco-margin-width
                     * $deco-column-count * 2) / $deco-column-count;
}

// 
// Mixin to re-define deco-grid global variables.
//
// Example: @include deco-grid(960px, 16, 10px, true);
//
// Advanced notes: By altering the last parameter (deco-uttermost-margin)
// it's possible to create deco-grids, which don't have the uttermost
// margins (and have a slightly wider cells).
//
@mixin deco-grid($width: $deco-grid-width,
                 $columns: $deco-column-count,
                 $margin: $deco-margin-width,
                 $uttermost: $deco-uttermost-margins) {
    $deco-grid-width: $width;
    $deco-column-count: $columns;
    $deco-margin-width: $margin;
    $deco-uttermost-margins: $uttermost;
    @if $deco-uttermost-margins {
      $deco-cell-width: ($deco-grid-width - $deco-margin-width
                         * $deco-column-count * 2) / $deco-column-count;
    } @else {
      $deco-cell-width: ($deco-grid-width - $deco-margin-width
                         * ($deco-column-count - 1)) / $deco-column-count;
    }
}

// 
// Mixin to inject attributes for a row-class.
//
// Example: div.row { @include deco-row; }
//
@mixin deco-row {
    float: left;
    position: relative;
    display: block;
    width: 100%;
}

// 
// Mixin to inject attributes for a cell-width-class.
//
// Example: div.width-1 { @include deco-width(1); }
//
// Advanced notes: By altering the last two parameters (padding-left
// and padding-right), it's possible to define cell-width-classes
// that have padding (which is reduced from their cell width).
//
@mixin deco-width($width: 16, $padding-left: 0, $padding-right: 0) {
  @if $deco-uttermost-margins {
      width: percentage(ceil(100000 *
          (($deco-cell-width * $width + 2
            * $deco-margin-width * ($width - 1)
            - $padding-right - $padding-left) / $deco-grid-width)
      ) * 0.00001);
  } @else {
      width: percentage(ceil(100000 *
          (($deco-cell-width * $width + $deco-margin-width
            * ($width - 1) - $padding-right - $padding-left) / $deco-grid-width)
      ) * 0.00001);
  }
  @if $padding-left != 0 {
      padding-left: percentage($padding-left / $deco-grid-width);
  }
  @if $padding-right != 0 {
      padding-right: percentage($padding-right / $deco-grid-width);
  }
}

// 
// Mixin to inject attributes for a cell-position-class.
//
// Example: div.position-0 { @include deco-width(0); }
//
@mixin deco-position($position: 0) {
  @if $deco-uttermost-margins {
      margin-left: -100% + percentage(ceil(100000 *
          (($deco-cell-width * $position
            + ($deco-margin-width * ($position) * 2)) / $deco-grid-width)
      ) * 0.00001);
  } @else {
      margin-left: -100% + percentage(ceil(100000 *
          (($deco-cell-width * $position
            + $deco-margin-width * $position) / $deco-grid-width)
      ) * 0.00001);
  }
}

// 
// Mixin to inject attributes for a cell-class.
//
// Example: div.cell { @include deco-row; }
//
// Advanced notes: By defining parameters, it's possible to define
// special cell-classes self-containing width and position attributes. 
//
@mixin deco-cell($position: -1, $width: 0,
                 $padding-left: 0, $padding-right: 0) {
    float: left;
    position: relative;
    left: 100%;
    // Allow special cell classes to be defined with a single mixin call:
    @if $position > -1 {
        @include deco-position($position);
    }
    @if $width > 0 {
        @include deco-width($width, $padding-left, $padding-right);
    }
}

// 
// Mixin to generate complete deco-grid-systems.
//
// Example: @include deco-gs(16);
//
// Notes: The embedded comments are from the original
// deco-gs, written by Alexander Limi.
//
@mixin deco-gs($columns: $deco-column-count) {
  /* The $columns-column Deco Grid System. 
   * Available in multiple variants, see http://deco.gs
   */
  @include deco-grid(960px, $columns, 10px, true);

  div.row {
    @include deco-row;
  }

  div.cell {
    @include deco-cell;
  }

  /* Width classes. 
     For a given cell width, the calculation is: 
     width = (total cell width) * n - (margin*2) */
  @for $i from 1 through $deco-column-count {
    div.width-#{$i} { @include deco-width($i); }
  }

  /* Positioning classes, these are subtracting from a rightmost 
     position, which is why they seem the wrong way around */
  /* For a given position, the calculation is:
     -100 + (total cell width * n)*/
  @for $i from 0 through ($deco-column-count - 1) {
    div.position-#{$i} { @include deco-position($i); }
  }

  /* End of the core Deco Grid System */

  /* Convenience classes — ¼, ½, ¾ widths and ¼, ½, ¾ positions. 
     Not strictly necessary. */
  /* .width-1:2 */
  div.width-1\3a 2 { @include deco-width($deco-column-count * (1/2)); }
  /* .width-1:4 */
  div.width-1\3a 4 { @include deco-width($deco-column-count * (1/4)); }
  /* .width-3:4 */
  div.width-3\3a 4 { @include deco-width($deco-column-count * (3/4)); }
  /* .position-1:4 */
  div.position-1\3a 4 { @include deco-position($deco-column-count * (1/4)); }
  /* .position-1:2 */
  div.position-1\3a 2 { @include deco-position($deco-column-count * (1/2)); }
  /* .position-3:4 */
  div.position-3\3a 4 { @include deco-position($deco-column-count * (3/4)); }

  /* Special classes for ⅓, ⅔ widths and ⅓, ⅔ positions. */
  /* .width-1:3 */
  div.width-1\3a 3 { @include deco-width($deco-column-count * (1/3)); }
  /* .width-2:3 */
  div.width-2\3a 3 { @include deco-width($deco-column-count * (2/3)); }
  /* .position-1:3 */
  div.position-1\3a 3 { @include deco-position($deco-column-count * (1/3)); }
  /* .position-2:3 */
  div.position-2\3a 3 { @include deco-position($deco-column-count * (2/3)); }

  /* Full/leftmost are useful synonyms for full width and leftmost positioning */
  div.position-leftmost { @include deco-position(0); }
  div.width-full { @include deco-width($deco-column-count); }
}